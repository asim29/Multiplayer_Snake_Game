{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar auth0 = require(\"auth0-js\"); // the following functions are exported\n\n\nvar ACCESS_TOKEN = 'access_token';\nexports.ACCESS_TOKEN = ACCESS_TOKEN;\nvar EXTRA_TOKENS = 'extra_tokens';\nexports.EXTRA_TOKENS = EXTRA_TOKENS;\nvar ID_TOKEN = 'id_token';\nexports.ID_TOKEN = ID_TOKEN;\nvar PROFILE = 'profile';\nexports.PROFILE = PROFILE;\nvar EXPIRES_AT = 'expires_at';\nexports.EXPIRES_AT = EXPIRES_AT;\nvar AUTHORIZATION_CODE = 'code';\nexports.AUTHORIZATION_CODE = AUTHORIZATION_CODE;\nvar IMPLICTY_RESPONSE_TYPE = 'token id_token';\n\nfunction configure(properties) {\n  // defining responseType based on how/if the developer set `oauthFlow` property\n  var responseType = properties.oauthFlow == AUTHORIZATION_CODE ? AUTHORIZATION_CODE : IMPLICTY_RESPONSE_TYPE;\n  currentProperties = properties;\n  exports.auth0Client = auth0Client = new auth0.WebAuth(__assign({}, properties, {\n    responseType: responseType\n  }));\n}\n\nexports.configure = configure;\n\nfunction isAuthenticated() {\n  var expiredsAt = localStorage.getItem(EXPIRES_AT);\n\n  if (!expiredsAt) {\n    // just guaranteeing\n    removeAuth0Props();\n    return false;\n  }\n\n  var tokenStillValid = JSON.parse(expiredsAt) > Date.now();\n  if (!tokenStillValid) removeAuth0Props();\n  return tokenStillValid;\n}\n\nexports.isAuthenticated = isAuthenticated;\n\nfunction signIn() {\n  auth0Client.authorize();\n}\n\nexports.signIn = signIn;\n\nfunction handleAuthCallback(cb) {\n  // When Auth0 hash parsed, get profile\n  auth0Client.parseHash(function (err, authResult) {\n    if (authResult && authResult.accessToken && authResult.idToken) {\n      window.location.hash = '';\n      loadProfile(authResult, cb);\n    } else if (err) {\n      console.error(\"Error: \" + err.error);\n    }\n  });\n}\n\nexports.handleAuthCallback = handleAuthCallback;\n\nfunction removeAuth0Props() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(EXTRA_TOKENS);\n  localStorage.removeItem(ID_TOKEN);\n  localStorage.removeItem(PROFILE);\n  localStorage.removeItem(EXPIRES_AT);\n}\n\nfunction signOut(config) {\n  removeAuth0Props();\n\n  if (!config) {\n    return Object.keys(subscribers).forEach(function (key) {\n      subscribers[key](false);\n    });\n  }\n\n  var returnTo = config.returnTo,\n      clientID = config.clientID;\n  auth0Client.logout({\n    returnTo: returnTo,\n    clientID: clientID\n  });\n}\n\nexports.signOut = signOut;\n\nfunction getProfile() {\n  var profile = localStorage.getItem(PROFILE);\n  return profile ? JSON.parse(profile) : null;\n}\n\nexports.getProfile = getProfile;\n\nfunction getAccessToken() {\n  return localStorage.getItem(ACCESS_TOKEN);\n}\n\nexports.getAccessToken = getAccessToken;\n\nfunction updateProfile(userId, userMetadata, cb) {\n  var auth0Manage = new auth0.Management({\n    domain: currentProperties.domain,\n    token: localStorage.getItem(ID_TOKEN)\n  });\n  auth0Manage.patchUserMetadata(userId, userMetadata, function (err, updatedProfile) {\n    if (err) cb(err);\n    localStorage.setItem(PROFILE, JSON.stringify(updatedProfile));\n    cb(null, updatedProfile);\n  });\n}\n\nexports.updateProfile = updateProfile;\n\nfunction subscribe(subscriber) {\n  var subscriberKey = Date.now();\n  subscribers[subscriberKey] = subscriber;\n  subscribers[subscriberKey](isAuthenticated());\n  return {\n    unsubscribe: function unsubscribe() {\n      delete subscribers[subscriberKey];\n    }\n  };\n}\n\nexports.subscribe = subscribe;\n\nfunction silentAuth(tokenName, audience, scope) {\n  return new Promise(function (resolve, reject) {\n    if (scope.indexOf('openid') < 0) {\n      scope = 'openid ' + scope;\n    }\n\n    auth0Client.checkSession({\n      audience: audience,\n      scope: scope\n    }, function (error, authResult) {\n      if (error && error.error !== 'login_required') {\n        // some other error\n        return reject(error);\n      } else if (error) {\n        // explicit authentication required\n        return resolve(false);\n      }\n\n      if (!isAuthenticated()) {\n        handleAuthResult(null, authResult);\n        return resolve(true);\n      }\n\n      var extraTokens = JSON.parse(localStorage.getItem(EXTRA_TOKENS));\n      extraTokens[tokenName] = authResult.accessToken;\n      localStorage.setItem(EXTRA_TOKENS, JSON.stringify(extraTokens));\n      return resolve(true);\n    });\n  });\n}\n\nexports.silentAuth = silentAuth;\n\nfunction getExtraToken(tokenName) {\n  var extraTokens = JSON.parse(localStorage.getItem(EXTRA_TOKENS) || '{}');\n  return extraTokens[tokenName];\n}\n\nexports.getExtraToken = getExtraToken; // the following properties and functions are private\n\nvar auth0Client;\nexports.auth0Client = auth0Client;\nvar subscribers = {};\nvar currentProperties = null;\n\nfunction loadProfile(authResult, cb) {\n  auth0Client.client.userInfo(authResult.accessToken, function (err, profile) {\n    if (err && cb) return cb(err);\n    var expTime = authResult.expiresIn * 1000 + Date.now(); // Save session data and update login status subject\n\n    localStorage.setItem(ACCESS_TOKEN, authResult.accessToken);\n    localStorage.setItem(EXTRA_TOKENS, JSON.stringify({}));\n    localStorage.setItem(ID_TOKEN, authResult.idToken);\n    localStorage.setItem(PROFILE, JSON.stringify(profile));\n    localStorage.setItem(EXPIRES_AT, JSON.stringify(expTime));\n    Object.keys(subscribers).forEach(function (key) {\n      subscribers[key](true);\n    });\n    if (cb) return cb();\n  });\n}\n\nfunction handleAuthResult(err, authResult) {\n  if (authResult && authResult.accessToken && authResult.idToken) {\n    window.location.hash = '';\n    loadProfile(authResult);\n  } else if (err) {\n    console.error(\"Error: \" + err.error);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}