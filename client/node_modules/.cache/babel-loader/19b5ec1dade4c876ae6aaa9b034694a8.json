{"ast":null,"code":"import _objectSpread from \"/home/asim/Documents/LUMS/Semester_6/Snake_Game/snake_game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { calculateAngle } from '../utils/formulas';\nimport createFlyingObjects from './createFlyingObjects';\nimport moveBalls from './moveCannonBalls';\nimport checkCollisions from './checkCollisions';\n\nfunction moveObjects(state, action) {\n  if (!state.gameState.started) return state;\n  var cannonBalls = moveBalls(state.gameState.cannonBalls);\n  var mousePosition = action.mousePosition || {\n    x: 0,\n    y: 0\n  };\n  var newState = createFlyingObjects(state);\n  var now = new Date().getTime();\n  var flyingObjects = newState.gameState.flyingObjects.filter(function (object) {\n    return now - object.createdAt < 4000;\n  });\n  var lostLife = state.gameState.flyingObjects.length > flyingObjects.length;\n  var lives = state.gameState.lives;\n\n  if (lostLife) {\n    lives--;\n  }\n\n  var started = lives > 0;\n\n  if (!started) {\n    flyingObjects = [];\n    cannonBalls = [];\n    lives = 3;\n  }\n\n  var x = mousePosition.x,\n      y = mousePosition.y;\n  var angle = calculateAngle(0, 0, x, y);\n  var objectsDestroyed = checkCollisions(cannonBalls, flyingObjects);\n  var cannonBallsDestroyed = objectsDestroyed.map(function (object) {\n    return object.cannonBallId;\n  });\n  var flyingDiscsDestroyed = objectsDestroyed.map(function (object) {\n    return object.flyingDiscId;\n  });\n  cannonBalls = cannonBalls.filter(function (cannonBall) {\n    return cannonBallsDestroyed.indexOf(cannonBall.id);\n  });\n  flyingObjects = flyingObjects.filter(function (flyingDisc) {\n    return flyingDiscsDestroyed.indexOf(flyingDisc.id);\n  });\n  return _objectSpread({}, newState, {\n    gameState: _objectSpread({}, newState.gameState, {\n      flyingObjects: flyingObjects,\n      cannonBalls: cannonBalls\n    }),\n    angle: angle\n  });\n}\n\nexport default moveObjects;","map":{"version":3,"sources":["/home/asim/Documents/LUMS/Semester_6/Snake_Game/snake_game/src/reducers/moveObjects.js"],"names":["calculateAngle","createFlyingObjects","moveBalls","checkCollisions","moveObjects","state","action","gameState","started","cannonBalls","mousePosition","x","y","newState","now","Date","getTime","flyingObjects","filter","object","createdAt","lostLife","length","lives","angle","objectsDestroyed","cannonBallsDestroyed","map","cannonBallId","flyingDiscsDestroyed","flyingDiscId","cannonBall","indexOf","id","flyingDisc"],"mappings":";AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAI,CAACD,KAAK,CAACE,SAAN,CAAgBC,OAArB,EAA8B,OAAOH,KAAP;AAE9B,MAAII,WAAW,GAAGP,SAAS,CAACG,KAAK,CAACE,SAAN,CAAgBE,WAAjB,CAA3B;AAEA,MAAMC,aAAa,GAAGJ,MAAM,CAACI,aAAP,IAAwB;AAC5CC,IAAAA,CAAC,EAAE,CADyC;AAE5CC,IAAAA,CAAC,EAAE;AAFyC,GAA9C;AAKA,MAAMC,QAAQ,GAAGZ,mBAAmB,CAACI,KAAD,CAApC;AAEA,MAAMS,GAAG,GAAI,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAZ;AAEA,MAAIC,aAAa,GAAGJ,QAAQ,CAACN,SAAT,CAAmBU,aAAnB,CAAiCC,MAAjC,CAAwC,UAAAC,MAAM;AAAA,WAC/DL,GAAG,GAAGK,MAAM,CAACC,SAAd,GAA2B,IADqC;AAAA,GAA9C,CAApB;AAIA,MAAMC,QAAQ,GAAGhB,KAAK,CAACE,SAAN,CAAgBU,aAAhB,CAA8BK,MAA9B,GAAuCL,aAAa,CAACK,MAAtE;AACA,MAAIC,KAAK,GAAGlB,KAAK,CAACE,SAAN,CAAgBgB,KAA5B;;AACA,MAAGF,QAAH,EAAa;AACXE,IAAAA,KAAK;AACN;;AAED,MAAMf,OAAO,GAAGe,KAAK,GAAG,CAAxB;;AACA,MAAG,CAACf,OAAJ,EAAY;AACVS,IAAAA,aAAa,GAAG,EAAhB;AACAR,IAAAA,WAAW,GAAG,EAAd;AACAc,IAAAA,KAAK,GAAG,CAAR;AACD;;AA7BiC,MA+B1BZ,CA/B0B,GA+BjBD,aA/BiB,CA+B1BC,CA/B0B;AAAA,MA+BvBC,CA/BuB,GA+BjBF,aA/BiB,CA+BvBE,CA/BuB;AAgClC,MAAMY,KAAK,GAAGxB,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAOW,CAAP,EAAUC,CAAV,CAA5B;AAEC,MAAMa,gBAAgB,GAAGtB,eAAe,CAACM,WAAD,EAAcQ,aAAd,CAAxC;AACD,MAAMS,oBAAoB,GAAGD,gBAAgB,CAACE,GAAjB,CAAqB,UAAAR,MAAM;AAAA,WAAKA,MAAM,CAACS,YAAZ;AAAA,GAA3B,CAA7B;AACA,MAAMC,oBAAoB,GAAGJ,gBAAgB,CAACE,GAAjB,CAAqB,UAAAR,MAAM;AAAA,WAAKA,MAAM,CAACW,YAAZ;AAAA,GAA3B,CAA7B;AAEArB,EAAAA,WAAW,GAAGA,WAAW,CAACS,MAAZ,CAAmB,UAAAa,UAAU;AAAA,WAAKL,oBAAoB,CAACM,OAArB,CAA6BD,UAAU,CAACE,EAAxC,CAAL;AAAA,GAA7B,CAAd;AACAhB,EAAAA,aAAa,GAAGA,aAAa,CAACC,MAAd,CAAqB,UAAAgB,UAAU;AAAA,WAAKL,oBAAoB,CAACG,OAArB,CAA6BE,UAAU,CAACD,EAAxC,CAAL;AAAA,GAA/B,CAAhB;AAGA,2BACKpB,QADL;AAEEN,IAAAA,SAAS,oBACJM,QAAQ,CAACN,SADL;AAEPU,MAAAA,aAAa,EAAbA,aAFO;AAGPR,MAAAA,WAAW,EAAXA;AAHO,MAFX;AAOEe,IAAAA,KAAK,EAALA;AAPF;AASD;;AAED,eAAepB,WAAf","sourcesContent":["import { calculateAngle } from '../utils/formulas';\nimport createFlyingObjects from './createFlyingObjects';\nimport moveBalls from './moveCannonBalls';\nimport checkCollisions from './checkCollisions';\n\nfunction moveObjects(state, action) {\n  if (!state.gameState.started) return state;\n\n  let cannonBalls = moveBalls(state.gameState.cannonBalls);\n\n  const mousePosition = action.mousePosition || {\n    x: 0,\n    y: 0,\n  };\n\n  const newState = createFlyingObjects(state);\n\n  const now = (new Date()).getTime();\n\n  let flyingObjects = newState.gameState.flyingObjects.filter(object => (\n    (now - object.createdAt) < 4000\n  ));\n\n  const lostLife = state.gameState.flyingObjects.length > flyingObjects.length;\n  let lives = state.gameState.lives;\n  if(lostLife) {\n    lives--;\n  }\n\n  const started = lives > 0;\n  if(!started){\n    flyingObjects = [];\n    cannonBalls = [];\n    lives = 3;\n  }\n\n  const { x, y } = mousePosition;\n  const angle = calculateAngle(0, 0, x, y);\n\n   const objectsDestroyed = checkCollisions(cannonBalls, flyingObjects);\n  const cannonBallsDestroyed = objectsDestroyed.map(object => (object.cannonBallId));\n  const flyingDiscsDestroyed = objectsDestroyed.map(object => (object.flyingDiscId));\n\n  cannonBalls = cannonBalls.filter(cannonBall => (cannonBallsDestroyed.indexOf(cannonBall.id)));\n  flyingObjects = flyingObjects.filter(flyingDisc => (flyingDiscsDestroyed.indexOf(flyingDisc.id)));\n\n  \n  return {\n    ...newState,\n    gameState: {\n      ...newState.gameState,\n      flyingObjects,\n      cannonBalls,\n    },\n    angle,\n  };\n}\n\nexport default moveObjects;"]},"metadata":{},"sourceType":"module"}